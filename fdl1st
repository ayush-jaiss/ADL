import tensorflow as tf
 # Disable eager execution to use graph mode
 tf.compat.v1.disable_eager_execution()
 # Define constants
 con1 = tf.constant(10)
 con2 = tf.constant(3.14)
 con3 = tf.constant("This is TensorFlow")
 con4 = tf.constant(False)
 # Start a session
 with tf.compat.v1.Session() as sess:
 result = sess.run([con1, con2, con3, con4])
 print(result)


 import tensorflow as tf
 # Disable eager execution
 tf.compat.v1.disable_eager_execution()
 # Define operations
 addition = tf.constant([1, 2, 3, 4, 5]) + tf.constant([5, 4, 3, 2, 1])
 multiplication = tf.constant([1, 2, 3, 4, 5]) * tf.constant([5, 4, 3, 2, 1])
 # Start a session to run the operations
 with tf.compat.v1.Session() as sess:
 result_addition, result_multiplication = sess.run([addition, multiplication])
 print("Addition:", result_addition)
 print("Multiplication:", result_multiplication)


import tensorflow as tf
# Disable eager execution to use graph mode (if using TensorFlow 2.x)
 tf.compat.v1.disable_eager_execution()
 # Define string constants
 str1 = tf.constant("I Love ")
 str2 = tf.constant("TensorFlow")
 # Concatenate strings
 concatenated_str = tf.strings.join([str1, str2])
 # Start a session and run the concatenation
 with tf.compat.v1.Session() as sess:
 result = sess.run(concatenated_str)
 print(result.decode())  # Decode to convert bytes to string in Python 3


import tensorflow as tf
 # Disable eager execution to use graph mode (if using TensorFlow 2.x)
 tf.compat.v1.disable_eager_execution()
 # Define placeholders in TensorFlow 2.x using compatibility mode
 a = tf.compat.v1.placeholder(tf.int32)
 b = a * 2
 # Create a session to run the computation
 with tf.compat.v1.Session() as sess:
 result = sess.run(b, feed_dict={a: 5})
 print(result)


import tensorflow as tf
 # Disable eager execution to use placeholders in TensorFlow 2.x
 tf.compat.v1.disable_eager_execution()
 # Define a string placeholder
 string_placeholder = tf.compat.v1.placeholder(tf.string)
 # Operation on the string (e.g., appending text)
 greeting = tf.strings.join([string_placeholder, " World!"])
 # Create a session to run the computation
 with tf.compat.v1.Session() as sess:
 # Feed the placeholder with a value
 result = sess.run(greeting, feed_dict={string_placeholder: "Hello"})
 print(result.decode())  # Output will be "Hello World!"


import tensorflow as tf
 # Disable eager execution for TensorFlow 2.x
 tf.compat.v1.disable_eager_execution()
 # Define a placeholder for an integer input
 x = tf.compat.v1.placeholder(tf.int32)
 # Define a simple operation that doubles the input
 y = x * 2
 # Run the computation in a session
 with tf.compat.v1.Session() as sess:
 # Use feed_dict to provide a value for the placeholder
 result = sess.run(y, feed_dict={x: 5})
 print("Result:", result)  


import tensorflow as tf
 # Disable eager execution for TensorFlow 2.x to use variables in graph mode
 tf.compat.v1.disable_eager_execution()
 # Define a variable with an initial value of 5
 x = tf.Variable(5, name="x")
 # Define an operation to add 3 to the variable
 y = x + 3
 # Initialize variables
 init = tf.compat.v1.global_variables_initializer()
 # Run the session
 with tf.compat.v1.Session() as sess:
 sess.run(init)  # Initialize the variable
 result = sess.run(y)  # Run the operation
 print("Result:", result)  
