In [5]: from keras.layers import Input, Dense 
from keras.models import Model
from keras.datasets import mnist 
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

In [7]: (XTrain, YTrain), (XTest, YTest) = mnist.load_data() 
print('XTrain class = ',type(XTrain))
print('YTrain class = ',type(YTrain))
# shape of our dataset.
print('XTrain shape = ',XTrain. shape)
print('XTest shape = ',XTest.shape) 
print('YTrain shape = ',YTrain.shape) 
print('YTest shape = ',YTest.shape)
 Number of  distinct vaLues of our NNZS T target 
 print('YTrain values = ', np. unique (YTrain)) 
 print('YTest values = ', np. unique (YTest))
# Dis tribution of- c Lasses in our dataset.
unique, counts = np. unique (YTrain, return_counts=True)
print('YTrain distribution = ',dict (zip(unique, counts))) 
unique, counts = np. unique (YTest, return_counts=True) 
print('YTest distribution = ',dict(zip(unique, counts)))

 
ln[11]: XTrain = XTrain.astype('float32') / 255
XTest  = XTest. astype( 'I-1oat32' )  /  255
It data reshapp!ng.
XTrain = XTrain.reshape((len(XTrain), np. prod (XTrain.shape[1:]))) 
XTest=XTest.reshape((len(XTest), np.prod(XTest.shape[1:])))
print (XTrain.shape) 
print (XTest.shape)


ln[15]:InputModel = Input (shape=(784,))
EncodedLayer =Dense(32, activation='relu')(InputModel) 
DecodedLayer = Dense(784, activation='sigmoid') (EncodedLayer) 
AutoencoderModel = Model (InputModel, DecodedLayer)
# we can sufflrnarize our nodeL.
AutoencoderMode1.summary()

ln[19]:AutoencoderModel.compile(optimizer='adam', loss=' binary crossentropy') 
history = AutoencoderModel.fit(XTrain, XTrain,
batch size=25, epochs=10, shuffle=True,
validation_data: (XTest, XTest))
# make prediction to decode the digits 
DecodedDigits = AutoencoderModel.predict(XTest)

ln[21]:def plotmodelhistory(history): 
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss']) 
plt.title('Autoencoder Model loss') 
plt.ylabel('Loss') 
plt.xlabel('Epoch')
plt.legend (['Train', 'Test'], loc='upper left') 
plt.show()
# List all data in history 
pr1nt  ( history. history. keys ( ) )
#visualiation of loss minimiation during the training process 
plotmodelhistory (history)
