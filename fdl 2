import numpy as np
import pandas as pd

df=pd.read_csv("Churn_Modelling.csv") 
df.head()

df.shape

df.info()

df.duplicated().sum()

df['Exited'].value_counts()

df['Geography'].value_counts()

df['Gender'].value_counts()

df.drop(columns=['RowNumber','CustomerId','Surname'],inplace=True)

df = pd.get_dummies(df, columns=['Geography','Gender'], prefix=['Geography',
'Gender'],drop_first = False, dtype = int)

X = df.drop(columns=['Exited'], axis = 1)
y = df['Exited']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=4

from sklearn.preprocessing import StandardScaler 
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) 
X_test = scaler.transform(X_test)

import tensorflow
tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense model = Sequential()
model.add(Dense(units=3, activation='sigmoid', input_dim = 13)) model.add(Dense(units=1, activation='sigmoid'))
model.summary()

from tensorflow.keras.optimizers import Adam
model.compile(optimizer=Adam(learning_rate=0.001),
    loss='binary_crossentropy', 
    metrics=['accuracy'])

model.fit(X_train, y_train,epochs=10)

model.layers[1].get_weights()

y_log = model.predict(X_test)

y_pred = np.where(y_log > 0.5,1,0)

from sklearn.metrics import accuracy_score, classification_report

accuracy_score(y_test,y_pred)

print("classification Report", classification_report (y_test, y_pred))







