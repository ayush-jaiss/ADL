import os
import cv2
import numpy as np
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split

# Paths
path1 = r'C:\Users\varsh\Downloads\fdl4thdata\Training'  # Training folder path
path2 = r'C:\Users\varsh\Downloads\fdl4thdata\Testing'   # Testing folder path

# Labels for the dataset
tumor = [('glioma_tumor', 0), ('meningioma_tumor', 1), ('no_tumor', 2), ('pituitary_tumor', 3)]

# Function to preprocess the dataset
def get_array(data_path):
    images, labels = [], []
    for folder_name, label_id in tumor:
        folder_path = os.path.join(data_path, folder_name)
        if not os.path.exists(folder_path):
            print(f"Folder not found: {folder_path}")
            continue
        for image_file in os.listdir(folder_path):
            image_path = os.path.join(folder_path, image_file)
            img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
            if img is None:
                print(f"Error reading image: {image_path}")
                continue
            resized_img = cv2.resize(img, (200, 200))
            images.append(resized_img)
            labels.append(label_id)
    return np.array(images), np.array(labels)

# Load and preprocess data
X_train, y_train = get_array(path1)
X_test, y_test = get_array(path2)

# Normalize image data
X_train = X_train / 255.0
X_test = X_test / 255.0

# Add a channel dimension
X_train = X_train.reshape(-1, 200, 200, 1)
X_test = X_test.reshape(-1, 200, 200, 1)

# Convert labels to categorical format
y_train = to_categorical(y_train, num_classes=4)
y_test = to_categorical(y_test, num_classes=4)


# Define the CNN model
def create_cnn():
    model = Sequential()
    # Convolutional Layer 1
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 1)))
    model.add(MaxPooling2D((2, 2)))
    
    # Convolutional Layer 2
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    
    # Flatten Layer
    model.add(Flatten())
    
    # Fully Connected Dense Layer
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.5))
    
    # Output Layer
    model.add(Dense(4, activation='softmax'))  # 4 classes
    
    # Compile the model
    model.compile(optimizer=Adam(learning_rate=0.001),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    return model

# Create the model
cnn_model = create_cnn()


# Train the model
history = cnn_model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=2,
    batch_size=32
)


# Evaluate the model
test_loss, test_accuracy = cnn_model.evaluate(X_test, y_test, verbose=0)
print(f"Test Loss: {test_loss:.4f}")
print(f"Test Accuracy: {test_accuracy:.4f}")


import matplotlib.pyplot as plt

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()


# Save the model
cnn_model.save('mri_cnn_model.h5')

# Load the model
from tensorflow.keras.models import load_model
loaded_model = load_model('mri_cnn_model.h5')
